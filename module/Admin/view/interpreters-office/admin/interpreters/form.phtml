<?php
use Zend\Form\Element;
/**
 *  module/Admin/view/interpreters-office/admin/people/form.phtml
 *  view script for rendering interpreters create|update form
 */
$this->headTitle('admin | interpreters | '.$this->layout()->action);
$this->headLink()->appendStylesheet($this->basePath('css/jquery-bootstrap-datepicker.css'));
$this->headScript()
        ->appendFile($this->basePath('js/lib/modernizr-custom.js'))
        ->appendFile($this->basePath('js/lib/jquery-ui/jquery-ui.min.js'))
        ->appendFile($this->basePath('js/lib/moment/min/moment.min.js'));

if ($this->errorMessage) : ?>
<div class="alert alert-danger"><?php echo $this->errorMessage ?></div>
<?php
return;
endif;
$formAction = $this->layout()->action == 'add' ? $this->url('interpreters/add')
    : $this->url('interpreters/edit', ['id' => $this->id ]);

$form = $this->form;
$form->add([
    'name' => 'submit',
    'type' => 'Zend\Form\Element\Submit',
     'attributes' => ['value' => 'save','class'=>'btn btn-success btn-lg'],
])->setAttribute('method', 'post')
   ->setAttribute('action', $formAction)
   ->setAttribute('class', 'form-horizontal');
?>
<div class="center-block" style="max-width:800px"><!-- wrapper -->
<h2><?php echo $this->navigation('default')->breadcrumbs() ?></h2>
<?php
$form->prepare();
$fieldset = $form->get('interpreter');
echo $this->form()->openTag($form);?>
<!-- nav tabs -->
<ul id="nav-tabs" class="nav nav-tabs" role="tablist">
    <li role="presentation"><a href="#contact" aria-controls="contact" role="tab" data-toggle="tab">contact info</a></li>
    <li role="presentation"><a href="#languages-pane" aria-controls="languages-pane" role="tab" data-toggle="tab">languages &amp; notes</a></li>
    <li role="presentation"><a href="#administrative" aria-controls="administrative" role="tab" data-toggle="tab">administrative/security</a></li>
</ul>
<!-- /nav tabs -->
<div class="tab-content" style="padding-top: 1em">
    <div role="tabpanel" class="tab-pane" id="contact">
        <?php foreach (['lastname','firstname','middlename','email','officePhone','mobilePhone','homePhone',
                    'address1','address2','city','state', 'zip'  ] as $elementName) :
                        $element = $fieldset->get($elementName);
               ?><div class="form-group">
                    <label class="control-label col-sm-3"><?php echo $element->getLabel()?></label>
                    <div class="col-sm-9"><?php echo $this->formElement($element),$this->formElementErrors($element) ?>
                    </div>
                </div>
            <?php endforeach; ?>
            <!-- end "contact" form elements -->
    </div><!-- /#contact ================================================================================ -->
    <div role="tabpanel" class="tab-pane" id="languages-pane">
        <div class="form-group"><?php // select element for choosing languages //?>               
            <div class="col-sm-10 col-sm-offset-2 form-inline"><?php 
                    $languageSelect = $fieldset->get('language-select'); 
                    echo $this->formSelect($languageSelect),$this->formElementErrors($languageSelect) ;
                    ?><button id="btn-add-language" class="btn btn-info" title="add this language">
                        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                        <span class="sr-only">add language</span></button><?php                    
                     /** @todo display fieldset validation errors ? */
           ?></div>
        </div>
        <div class="form-group panel panel-default" id="languages">
        <?php 
        //   display individual languages, hidden id input, certification select       
            $collection = $fieldset->get('interpreterLanguages');
            $interpreterLanguages = $form->getObject()->getInterpreterLanguages();

            if ($interpreterLanguages->count()) : 
               $helper = (new \InterpretersOffice\Admin\Form\View\Helper\LanguageElementCollection())->setView($this);
               echo $helper($collection);
               //echo $this->partial('partials/interpreters/language.phtml',compact('collection','interpreterLanguages'));
            endif;
            echo $this->formElementErrors($collection);
            ?>
            
            
            </div><!-- /#languages .form-group -->
           <?php $element = $fieldset->get('comments');?>
           <label class="control-label col-sm-3"><?php echo $element->getLabel()?></label>
           <div class="col-sm-9 form-inline" style="margin-bottom:1em"><?php echo $this->formElement($element), $this->formElementErrors($element)?>
           </div>
        </div><!-- /#languages-pane ================================================================================ -->
    <div role="tabpanel" class="tab-pane" id="administrative">
        
        <?php foreach (['hat','active','fingerprintDate','securityClearanceDate','contractExpirationDate','oathDate',] as $elementName):
                    $element = $fieldset->get($elementName);?>
                <div class="form-group">
                    <label class="control-label col-sm-3"><?php echo $element->getLabel()?></label>
                    <div class="col-sm-9"><?php echo $this->formElement($element),$this->formElementErrors($element)                   ?>
                    </div>
                </div>
                <?php endforeach; ?>
                <!--"Don't mix with other components
                    Do not mix form groups or grid column classes directly with input groups. 
                    Instead, nest the input group inside of the form group or grid-related element.
                -->
                <?php 
                if (! $this->obscure_values) : // regular plain-text elements
                    foreach (['dob','ssn'] as $elementName) : 
                        if (! $fieldset->has($elementName)) {
                            continue;
                        }
                        $element = $fieldset->get($elementName); 
                ?>
                <div class="form-group">
                    <label class="control-label col-sm-3"><?php echo $element->getLabel()?></label>
                    <div class="col-sm-9"><?php echo $this->formElement($element),$this->formElementErrors($element) ?></div>
                </div><?php
                    endforeach;
                else:  // should be obscured until they re-authenticate/decrypt             
                    foreach (['dob','ssn'] as $elementName) :
                        if (! $fieldset->has($elementName)) : break; endif;
                    $element = $fieldset->get($elementName);?>
                <div class="form-group">
                    <label class="control-label col-sm-3"><?php echo $element->getLabel()?></label>
                    <?php $encrypted = $element->getValue();
                    if (! $encrypted): // nothing to obscure
                        ?><div class="col-sm-9"><?php echo $this->formElement($element),$this->formElementErrors($element) ?></div><?php
                    else:  // display text inputs as encrypted/disabled
                        $element->setAttribute('disabled','disabled');?>
                    <div class="col-sm-9 form-inline encrypted">
                        <?php 
                            $element->setValue('**************');
                        ?><div class="input-group-btn"><?php echo $this->formElement($element)?><button data-toggle="modal" data-target="#login-modal" title="re-authenticate to view or edit sensitive data fields" class="btn btn-default" type="button"><span class="glyphicon glyphicon-lock"></span><span class="sr-only">unlock</span></button>                        
                        <?php 
                            echo $this->formElementErrors($element);
                            $hidden = (new \Zend\Form\Element\Hidden( 'encrypted.'.$elementName ))->setValue($encrypted);
                            echo $this->formHidden($hidden);
                        ?>
                        </div>
                    </div>    
                <?php endif;?>                    
                </div>

             <?php endforeach; endif; ?>
    </div>
</div><!-- /.tab-content -->
 <div style="margin-top:1em" class="form-group">
    <div class="col-sm-offset-3 col-sm-9">
        <?php
        $csrf = $form->get('csrf');
        echo $this->formHidden($csrf),$this->formElementErrors($csrf) ;
        echo $this->formHidden($fieldset->get('id'));
        echo $this->formSubmit($form->get('submit'));?>
    </div>       
</div><!-- / .form-group -->
<?php echo $this->form()->closeTag(); ?>    
</div><!-- /wrapper -->
<?php // the following is only for "edit" action: re-authentication dialog for reading DOB and SSN ?>
<div class="modal" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="modal-auth-title">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 id="modal-auth-title" class="modal-title">Please re-authenticate for access to dob/ssn</h4>
      </div>
      <div class="modal-body">
          <div id="div-auth-error" class="alert alert-warning alert-dismissable hidden">Authentication failed.</div>
          <form autocomplete="off" id="form-login">
              <div class="form-group">
                <label class="sr-only"  for="identity">username or email</label>
                <input name="identity" autocomplete="off" value="" type="text" class="form-control" id="identity" placeholder="email or username">
              </div>
              <div class="form-group">
                <label class="sr-only" for="password">password</label>
                <input name="password" autocomplete="off" value="" type="password" class="form-control" id="password" placeholder="password">
              </div>              
              <?php if ($this->login_csrf): 
                        echo $this->formHidden($this->login_csrf),$this->formElementErrors($this->login_csrf) ;
                    endif;
               ?>
          </form>
      </div>
      <div class="modal-footer" style="text-align: center">
        <button type="button" id="auth-submit" class="btn btn-primary">authenticate</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">cancel</button>        
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<script type="text/javascript">
/** 
 * attach event listeners
 * 
 * @todo refactor to make less long and monolithic
 */
//*/
$(function(){
    if (! window.Modernizr.inputtypes.date){
        $('input.date').each(function(i,element){
            if (element.value.match(/^\d{4}-\d\d-\d\d$/)) {
                element.value = element.value.replace(/(\d{4})-(\d\d)-(\d\d)/,"$2/$3/$1");
            }
        });    
    }    
    var action = $('#interpreter-form').attr('action').indexOf('/edit/') > -1 ?
            'update' : 'create';
    // this is bullshit. what we really want is the button thingy on the same 
    // line as the input but it wraps unless we set the containing element's 
    // class to form-inline, which makes it too narrow. NOTE TO SELF: try "nowrap"
    if ($("div.col-sm-9.encrypted").length) {
        $('#dob[disabled="disabled"], #ssn[disabled="disabled"]')
              .css({width:'70%'});//.attr({disabled:"disabled"});
    }
    // ================================================
    
    // make the first tab active, unless we are coming back from a validation
    // error
    //
    //$('#nav-tabs a[aria-controls="'+"languages-pane"+'"]').tab("show");
    if (! $(".validation-error").text()) {        
       $('#nav-tabs li:first a').tab("show");
    } else {
       var pane = $(".validation-error").first().closest('div.tab-pane');
       var id = pane.attr("id");
       $('#nav-tabs a[aria-controls="'+id+'"]').tab("show");
    }
    if (! Modernizr.inputtypes.date) {
        $('input.date').datepicker({
            changeMonth: true,
            changeYear: true,
            constrainInput : false
        });
        // if the dob field is enabled, set datepicker options
        if (!($('#dob').val())) { // i.e., if it isn't '**********'
            $('#dob').datepicker("option",{
                maxDate: "-18y",
                minDate : "-100y",         
                yearRange : "-100:-18"                
            });        
        } 
        /** @todo 
         * set datepicker options to display year for dob, if element exists 
         * set options to constrain security_clearance, fingerprint etc date ranges
         * NOTE TO SELF: setting the relative maxDate to 0 has the interesting side 
         * effect of making invalid dates NOT display in cases like 04/17/23472348789374
         */
        /*
        $('#fingerprint_date, #oath_date, #security_clearance_date').datepicker("option",{            
            maxDate: 0
        });        */
    }
    /**
     * add a working language. 
     */
    $('#btn-add-language').on('click',function(event){
        
        event.preventDefault();        
        var index; 
        var language_id = $('#language-select').val();
        if (! language_id) { return; }
        if ($('#language-'+language_id).length) { return; }
        // get the (server-side) index of the last fieldset
        var last = $('#languages .interpreter-language > select').last();
        if (last.length) {
            var m = last.attr("name").match(/\[(\d+)\]/);
            if (m.length) {
                index = parseInt(m.pop()) + 1;
            } else {
                // this is an error. to do: do something
            }
        } else {
            index = 0;
        }
        url = /*window.basePath +*/ "/admin/interpreters/language-fieldset";
        $.get(url,{index : index, id : language_id },function(data){
            $('#languages').append(data);
        });
    });
     /* remove a language *********************************************/
    $('#languages').on("click", ".btn-remove-language",function(event){
        event.preventDefault();
        var div =  $(this).closest("div");
        var divs = div.add(div.prev());
        divs.slideUp(function(){divs.remove();});
    });
    // prevent the damn browser from autocompleting
    // http://stackoverflow.com/questions/31439047/prevent-browser-from-remembering-credentials-password/43874591#43874591
    $('#login-modal').on("show.bs.modal",function(){
         $('#identity, #password').val("");        
    });
   
    /** validate each tab pane before moving on **/
    $('a[data-toggle="tab"]').on('click', function (event) {
        
        var id = '#'+$('div.active').attr('id');         
        if (id.indexOf('languages') !== -1 && 
           ! $(".interpreter-language input").length
        ) {
            $('#languages').append(
                $('<div>').addClass("alert alert-warning validation-error")
                .text("at least one language is required")
            );
            return false;
        }
        var selector = id + " input, " + id + " select";
        var data =($(selector).serialize());
        //console.log(data);
        var that = this;
        $.post('/admin/interpreters/validate-partial?action='+action,
            data,
            function(response){
                
                if (response.validation_errors) {
                    if (response.validation_errors.interpreterLanguages) {
                    // note to self: either learn how to drill down into Javascript
                    // objects whose property names are unknown, or else make the
                    // server-side action flatten shit out for us, because this
                    // is ugly.
                        $.each(response.validation_errors.interpreterLanguages,
                            function(i,obj){                                
                                for (var prop in obj) {
                                    for (var shit in obj[prop]) {
                                        var error = obj[prop][shit];
                                        var div = $('#languages .language-certification')
                                                .eq(i).children(".validation-error");
                                        div.text(error).show();
                                        break;
                                    }
                                }
                            });
                    } else {
                        console.warn("shit has nada to do with languages?");
                        displayValidationErrors(response.validation_errors);
                    }                    
                    
                } else {                   
                    $(id + " .validation-error").hide();
                    $(that).tab("show");
                }                        
            },'json'
        );
        return false;
    });
    
    $('#auth-submit').on("click",function(){
       
        var input = {
            identity : $('#identity').val(),
            password : $('#password').val(),
            login_csrf : $('input[name="login_csrf"').val()
        };
        var url = /*window.basePath +*/ '/login';
        $.post(url, input, function(response){
            if (response.validation_errors) {
                //refresh the CSRF token
                $('input[name="login_csrf"').val(response.login_csrf);
                return displayValidationErrors(response.validation_errors);
            }            
            if (response.authenticated) {
                
                var encrypted_dob =  $('input[name="encrypted.dob"]');
                var encrypted_ssn =  $('input[name="encrypted.ssn"]');
                $.post('/vault/decrypt',{
                    dob  : encrypted_dob.val(),
                    ssn  : encrypted_ssn.val(),
                    csrf : response.csrf
                },function(response){
                    
                    if (response.error) {
                        $('#div-auth-error').text("Error: "+response.error).removeClass("hidden");
                        return;
                    }
                    $('#ssn, #dob').removeAttr("disabled");
                    if (response.ssn) { 
                        encrypted_ssn.remove();
                        $('#ssn').val(response.ssn);
                    }
                    if (response.dob) {                        
                        encrypted_dob.remove();
                        $('#dob')
                            .val(window.moment(response.dob,"YYYY-MM-DD").format("MM/DD/YYYY"))
                            .datepicker("option",{
                                maxDate: "-18y",
                                minDate : "-100y",         
                                yearRange : "-100:-18",
                        });
                    }
                    // hide the modal dialog
                    $('#login-modal').modal('hide');
                    // hide the lock thingies
                    $('button[data-target="#login-modal"]').hide();  
                    $('#ssn, #dob').css({width:'100%'});
                },'json');
            } else {                
                return $('#div-auth-error').text(response.error).removeClass("hidden");
            }
        });        
    });                
});
</script>
