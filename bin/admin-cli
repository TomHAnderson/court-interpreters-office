#!/usr/bin/env php
<?php
namespace InterpretersOffice;
require __DIR__.'/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Question\ChoiceQuestion;

use Symfony\Component\Console\Style\SymfonyStyle;

use Zend\Validator\EmailAddress as EmailValidator;

use InterpretersOffice\Entity;

class CreateAdminUserCommand extends Command
{
    protected function configure()
    {
        $this
        // the name of the command (the part after "bin/console")
        ->setName('setup:create-admin-user')
        // the short description shown while running "php bin/console list"
        ->setDescription('creates an initial administrative user')
        // the full command description shown when running the command with
        // the "--help" option
        ->setHelp('creates an initial administrative user');
    }
    
    /**
     * ugly temporary helper for wrapping shit in <question> tags
     * 
     * written before we read https://symfony.com/doc/current/console/style.html
     * 
     * @param type $string
     * @return string
     */
    protected function q($string)
    {
        return '<question>'.$string.'</question>';
    }
    
    
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input,$output);
        try {
            $entityManager = require __DIR__.'/../config/doctrine-bootstrap.php';
            $admin_users = $entityManager
                    ->createQuery('SELECT u FROM InterpretersOffice\Entity\User u JOIN u.role r WHERE r.name =\'administrator\'')
                    ->getResult();
        } catch (Exception $e) {
            $io->error([
                sprintf('Exception %s encountered with error message: ',get_class($e)),
                $e->getMessage(),
                'Please check your configuration and try again.'
                
            ]);
            return;
        }
        try 
        {            
            $role = $entityManager->createQuery('SELECT r FROM InterpretersOffice\Entity\Role r WHERE r.name = :name')
                ->setParameters([':name'=>'administrator'])
                ->getSingleResult();
            
            $hats = $entityManager->createQuery('SELECT h FROM  InterpretersOffice\Entity\Hat h INDEX BY h.id WHERE h.id < 3')->getResult();
            if (! $hats) {
                throw new \Doctrine\ORM\NoResultException();
            }
            
        } catch (\Doctrine\ORM\NoResultException $e) {
           return $io->error("Initial database setup does not seem to have been completed. Please run [something] and then try again.");
        } catch (\Exception $e) {
            $io->error(sprintf("Error: %s exception was encountered while querying database. Please check your configuration."));
        }
        
        /**
        if ($admin_users) {
            return $io->error("An administrative user has already been set up. Please use the web interface for user management.");
        }
        */
        $helper = $this->getHelper('question');
        
        $question_username = new Question($this->q('Please enter this administrative user\'s username: ')
                ,'david'
        );
        
        $username = '';
        while (! $username )
        {
            $username = trim($helper->ask($input, $output, $question_username));
        }
        
        $question_password = new Question($this->q('Please enter this administrative user\'s password:')
                ,'boink'
        );
        $validator = function($value){
            if (trim($value == '')) {
                throw new \RuntimeException("password is required");
            }
            return $value;
        };
        $question_confirm_password = new Question($this->q('Confirm administrative user\'s password:'),
                'boink'
         );
        
        $question_password->setValidator($validator)->setHidden(true);
        $question_confirm_password->setHidden(true);
        
        $pwd1 = $helper->ask($input, $output, $question_password);
        $pwd2 = $helper->ask($input, $output, $question_confirm_password);
        
        while ($pwd1 != $pwd2) {
            $output->writeln("<error>passwords do not match. once again...</error>");          
            $pwd1 = $helper->ask($input, $output, $question_password);
            $pwd2 = $helper->ask($input, $output, $question_confirm_password);
        }
        
        $hat_choices = [            
               1 => 'staff Court Interpreter',
               2 => 'other member of the Court Interpreters Office staff'            
        ];
        
        $hat_question = new ChoiceQuestion(
        $this->q('Choose the most appropriate "Hat" for this admin user [default: staff Court Interpreter]'),
                $hat_choices,
                1       
        );
        $hat_string = $helper->ask($input, $output,$hat_question);
        $hat_id =  array_flip($hat_choices)[$hat_string];
        $hat = $hats[$hat_id];
        
        $firstname = $helper->ask($input,$output,new Question($this->q("user's first name? ")
                ,'David'
         ));
        $lastname = $helper->ask($input,$output,new Question($this->q("user's last name? "),
                'Mintz'));
        
        $email =  trim($helper->ask($input,$output,new Question($this->q("user's email address? ")
                ,'david@davidmintz.org'
                )));
        
        $email_validator = new EmailValidator();
        
        while (! $email_validator->isValid($email)) {
            $output->writeln("<error>$email is not a valid email address. Please try again...</error>");  
            $helper->ask($input,$output,new Question($this->q("user's email address? ")));
        }
        
        $person = new Entity\Person();
        $person->setFirstname($firstname)
                ->setLastname($lastname)
                ->setEmail($email);
        $person->setHat($hat);
        
        $user = new Entity\User();
        $user 
            ->setUsername($username)
            ->setPassword($pwd1)
            ->setActive(true)
            ->setRole($role)
            ->setPerson($person);
        
        $entityManager->persist($person);
        $entityManager->persist($user);        
        $entityManager->flush();
        
        $io->success("Initial admin user has been created.");
         
    }
}



$application = new Application();

$application->add(new CreateAdminUserCommand);

$application->run();